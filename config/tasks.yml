task_batchProcessDetection:
  description: >
    """You are tasked with identifying whether the PL/1 code is part of a batch processing system. 
    Follow these steps to achieve this:
    1. **Analyze Input/Output Operations:**
       - Identify and list all file operations within the code, such as OPEN, READ, WRITE, and CLOSE statements.
       - Determine the nature of these filesâ€”whether they are input or output files.

    2. **Identify Batch Processing Characteristics:**
      Does this program match the definition of a batch program : 
        It should be non-interactive, handle data in files, process records sequentially, 
        and perform automated tasks without user input.

    3. **End Result:**
       - Based on that analyses give an indication of the kind of program by only using the words : 
         - for a batch program : "BATCH" 
         - for other programs use : "ONLINE"

    4. **This is the code:**
       {code_text}
    """
  expected_output: >
    """
    Indicate if the code is used for batch processing. 
    Only answer "BATCH" if it is a batch program or "ONLINE" if it is something else. 
    """

task_documentationGeneration:
  description: >
    """You are tasked with creating detailed documentation for a legacy PL/1 program based on the provided source code. 
    Follow these steps to achieve this:

    1. **Identify the Program's Function:**
       - Determine the main purpose and function of the program.
       - Fill in the "Function" and "Purpose" sections of the template.

    2. **Provide a Program Overview:**
       - Give a high-level description of what the program does.
       - List the key features or functionalities.
       - Fill in the "Description" and "Detailed Description" sections of the template.

    3. **Document Field Mapping and Logic:**
       - Identify each output field generated by the program.
       - Map each field to its corresponding source in the code, including any transformations or calculations applied.
       - Document this in the "Field Mapping and Logic" section.

    4. **Outline the Process Flow:**
       - Describe the main procedures in the code, including initialization, data preparation, main processing, file writing, and finalization.
       - Fill in the "Process Flow" section.

    5. **Describe Parameters and Rerun Logic:**
       - Identify any parameters used in the program.
       - Explain how the program handles reruns, including parameter management.
       - Document this in the "Parameters and Rerun Logic" section.

    6. **Generalize Special Cases:**
       - Identify any special cases or conditional logic in the code.
       - Document how the program handles these cases, including date calculations, exception handling, and other conditional processing.
       - Fill in the "Special Cases" section with generalized descriptions.

    7. **Document System Dependencies:**
       - List any external programs, files, or include files the program depends on.
       - Fill in the "System Dependencies" section.

    8. **Detail the Output:**
       - Describe the output files generated by the program, including their structure and how they are handled.
       - Fill in the "Output" section.

    9. **Record Author Information:**
       - Document the original programmer's name, creation date, and any subsequent updates.
       - Fill in the "Author Information" section.

    10. **Provide Examples and Annotations:**
        - Give sample input/output examples if applicable.
        - Summarize any important comments or annotations from the code.
        - Fill in the "Examples" and "Comments and Annotations" sections.

    11. **Define Terms in a Glossary:**
        - Identify and define any specialized terms or abbreviations used in the program or documentation.
        - Fill in the "Glossary" section.

    12. **Reference Additional Documentation:**
        - List any related documents or references that provide further context or information.
        - Fill in the "References" section.

    13. **This is the code:**
       {code_text}
    """
  expected_output: >
    """
      Complete the documentation template with accurate and detailed information based on the provided source code.
      Use markdown format and syntax.
      This is the template :
         {output_template}
    """

task_documentationReview:
  description: >
    """You are tasked with reviewing the documentation generated by the Documentation Generation Agent. Follow these steps:
    1. **Review Documentation:**
       - Read through the documentation carefully, focusing on clarity, accuracy, and completeness.
       - Check if the correct template structure has been followed.
       - If needed restructure the given document so it follows the templatestructure. 

    2. **Provide Feedback:**
       - Offer feedback on one aspect of the documentation one at a time, such as clarity, detail, or correctness.
       - Ensure that each piece of feedback is actionable and aimed at improving understanding for a junior developer.

    3. **Dialogue and Revisions:**
       - Engage in a back-and-forth dialogue with the Documentation Generation Agent to address feedback and make necessary revisions.
       - Continue the review process until the documentation meets the standard of being easily understandable, accurate and uses the given template.

    4. **Updating document:**
       - Each time you get extra information from an agent you update the documentation to add the new information in the given template
       structure. You keep the latest version of this document till your task is done. 

    5. **Final Approval:**
       - Confirm that the final documentation is sufficient for a junior developer to maintain and understand the PL/1 code effectively.
    """
  expected_output: >
    """
    Review Feedback: 
    - **Final Approval:** 
       Confirmation that the documentation meets the required standard of clarity and accuracy. 
       Just say "I approve this version as final." 
    - **Final document:**
       Give the final document you kept on updating based on the information you got from the Documentation Generation Agent.
       Make sure the documentation template is filled in with accurate and detailed information given by the Documentation Generation Agent.
       Use markdown format and syntax.
       This is the template :
         {output_template}
    """

task_documentationConclusion:
  description: >
    """You are tasked of collecting all the answers the documentationGenerationAgent and the documentationReviewAgent
    and merge them in one final well structured document.
    """
  expected_output: >
    """
    Final document with the code description  
    """
